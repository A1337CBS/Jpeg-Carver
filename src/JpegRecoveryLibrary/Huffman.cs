using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace JpegRecoveryLibrary
{
    public class Huffman
    {
        public static int[][] mincode, maxcode, valptr;
        public static byte[][] huffval;
        public static int[] maxcodelength;
        public static int maxDhtID = 8;
        public struct DHTStruct
        {
            public int count;
            public int id;
            public int[][] maxcode;
            public int[][] mincode;
            public int[][] valptr;
            public int[][] huffvalInt; //Get rid of this later
            public byte[][] huffval;
            public int[] maxcodelength;
            public override int GetHashCode()
            {
                
                unchecked // Overflow is fine, just wrap
                {
                    int hash = 27;
                    for (var i = 0; i < this.maxcode.Length; i++)
                    {
                        hash = hash + this.maxcode[i].GetHashCode();
                    }
                    for (var i = 0; i < this.mincode.Length; i++)
                    {
                        hash = hash + this.mincode[i].GetHashCode();
                    }
                    for (var i = 0; i < this.valptr.Length; i++)
                    {
                        hash = hash + this.valptr[i].GetHashCode();
                    }
                    for (var i = 0; i < this.maxcodelength.Length; i++)
                    {
                        hash = hash + this.maxcodelength[i].GetHashCode();
                    }
                    for (var i = 0; i < this.huffval.Length; i++)
                    {
                        hash = hash + this.huffval[i].GetHashCode();
                    }

                    return hash;
                }
            }
        }

        public static List<DHTStruct> DHTs = new List<DHTStruct>();

        #region DHT 1
        public static int[][] mincode1 = new int[][] {
            new int[] { 0, 0, 2, 14, 30, 62, 126, 254, 510, 0, 0, 0, 0, 0, 0, 0 },//YDC
            new int[] { 0, 0, 4, 10, 26, 58, 120, 248, 502, 1014, 2038, 4084, 0, 0, 32704, 65410 },//YAC
            new int[] { 0, 0, 6, 14, 30, 62, 126, 254, 510, 1022, 2046, 0, 0, 0, 0, 0 },//CDC
            new int[] { 0, 0, 4, 10, 24, 56, 120, 246, 500, 1014, 2038, 4084, 0, 16352, 32706, 65416 }//CAC
        };

        public static int[][] maxcode1 = new int[][]{
            new int[] { -1, 0, 6, 14, 30, 62, 126, 254, 510, -1, -1, -1, -1, -1, -1, -1 },//YDC
            new int[] { -1, 1, 4, 12, 28, 59, 123, 250, 506, 1018, 2041, 4087, -1, -1, 32704, 65534 },//YAC
            new int[] { -1, 2, 6, 14, 30, 62, 126, 254, 510, 1022, 2046, -1, -1, -1, -1, -1 },//CDC
            new int[] { -1, 1, 4, 11, 27, 59, 122, 249, 506, 1018, 2041, 4087, -1, 16352, 32707, 65534 }//CAC
        };

        public static int[][] valptr1 = new int[][]{
            new int[] { 0, 0, 1, 6, 7, 8, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0 },//YDC
            new int[] { 0, 0, 2, 3, 6, 9, 11, 15, 18, 23, 28, 32, 0, 0, 36, 37 },//YAC
            new int[] { 0, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0, 0, 0, 0 },//CDC
            new int[] { 0, 0, 2, 3, 5, 9, 13, 16, 20, 27, 32, 36, 0, 40, 41, 43 }//CAC
        };

        public static byte[][] huffval1 = new byte[][]{
            new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },//YDC
            new byte[] { 1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250 },//YAC
            new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },//CDC
            new byte[] { 0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250 }//CAC

        };

        public static int[] maxcodelength1 = { 9, 16, 11, 16 }; // For each array in maxcode, find max value and then its length in bits

        public static DHTStruct DHT;


        #endregion

        #region DHT 2
        public static int[][] mincode2 = new int[][] { new int[] { 0, 0, 0, 12, 28, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 4, 10, 26, 60, 122, 250, 506, 1016, 2038, 4082, 8170, 16344, 32700, 65418 }, new int[] { 0, 0, 0, 12, 30, 62, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 4, 10, 26, 56, 120, 248, 502, 1014, 2036, 4080, 8168, 16348, 32708, 65426 } };

        public static int[][] maxcode2 = new int[][] { new int[] { -1, -1, 5, 13, 30, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, new int[] { -1, 1, 4, 12, 29, 60, 124, 252, 507, 1018, 2040, 4084, 8171, 16349, 32708, 65534 }, new int[] { -1, -1, 5, 14, 30, 62, 126, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, new int[] { -1, 1, 4, 12, 27, 59, 123, 250, 506, 1017, 2039, 4083, 8173, 16353, 32712, 65534 } };

        public static int[][] valptr2 = new int[][] { new int[] { 0, 0, 0, 6, 8, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 2, 3, 6, 10, 11, 14, 17, 19, 22, 25, 28, 30, 36, 45 }, new int[] { 0, 0, 0, 6, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 2, 3, 6, 8, 12, 16, 19, 24, 28, 32, 36, 42, 48, 53 } };

        public static byte[][] huffval2 = new byte[][] { new byte[] { 7, 8, 6, 5, 4, 9, 3, 10, 2, 1, 0, 11 }, new byte[] { 1, 2, 3, 4, 17, 5, 18, 6, 33, 7, 19, 34, 0, 8, 49, 20, 65, 50, 35, 21, 9, 81, 66, 22, 97, 36, 51, 23, 82, 113, 129, 24, 98, 145, 37, 67, 161, 177, 240, 38, 52, 114, 10, 25, 193, 209, 53, 39, 225, 83, 54, 130, 241, 146, 162, 68, 84, 115, 69, 70, 55, 71, 99, 40, 85, 86, 87, 26, 178, 194, 210, 226, 242, 100, 131, 116, 147, 132, 101, 163, 179, 195, 211, 227, 41, 56, 102, 243, 117, 42, 57, 58, 72, 73, 74, 88, 89, 90, 103, 104, 105, 106, 118, 119, 120, 121, 122, 133, 134, 135, 136, 137, 138, 148, 149, 150, 151, 152, 153, 154, 164, 165, 166, 167, 168, 169, 170, 180, 181, 182, 183, 184, 185, 186, 196, 197, 198, 199, 200, 201, 202, 212, 213, 214, 215, 216, 217, 218, 228, 229, 230, 231, 232, 233, 234, 244, 245, 246, 247, 248, 249, 250 }, new byte[] { 6, 5, 4, 3, 7, 2, 8, 1, 9, 0, 10, 11 }, new byte[] { 1, 2, 3, 17, 4, 33, 18, 5, 49, 6, 0, 34, 19, 65, 81, 7, 50, 97, 20, 113, 8, 66, 129, 35, 145, 21, 82, 161, 98, 22, 51, 9, 177, 36, 193, 209, 67, 114, 240, 23, 225, 130, 52, 37, 146, 83, 24, 99, 68, 241, 162, 178, 38, 53, 25, 84, 54, 69, 100, 39, 10, 115, 131, 147, 70, 116, 194, 210, 226, 242, 85, 101, 117, 86, 55, 132, 133, 163, 179, 195, 211, 227, 243, 41, 26, 148, 164, 180, 196, 212, 228, 244, 149, 165, 181, 197, 213, 229, 245, 40, 71, 87, 102, 56, 118, 134, 150, 166, 182, 198, 214, 230, 246, 103, 119, 135, 151, 167, 183, 199, 215, 231, 247, 72, 88, 104, 120, 136, 152, 168, 184, 200, 216, 232, 248, 57, 73, 89, 105, 121, 137, 153, 169, 185, 201, 217, 233, 249, 42, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234, 250 } };

        public static int[] maxcodelength2 = { 6, 16, 7, 16 };
        #endregion

        #region DHT 3
        public static int[][] mincode3 = new int[][] { new int[] { 0, 0, 0, 14, 30, 62, 126, 254, 0, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 4, 10, 26, 58, 120, 248, 500, 1012, 2038, 4082, 8172, 16348, 32708, 65420 }, new int[] { 0, 0, 4, 12, 30, 62, 126, 254, 510, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 4, 12, 26, 56, 118, 246, 502, 1012, 2034, 4080, 8168, 16352, 32710, 65426 } };

        public static int[][] maxcode3 = new int[][] { new int[] { -1, -1, 6, 14, 30, 62, 126, 254, -1, -1, -1, -1, -1, -1, -1, -1 }, new int[] { -1, 1, 4, 12, 28, 59, 123, 249, 505, 1018, 2040, 4085, 8173, 16353, 32709, 65534 }, new int[] { -1, 1, 5, 14, 30, 62, 126, 254, 510, -1, -1, -1, -1, -1, -1, -1 }, new int[] { -1, 1, 5, 12, 27, 58, 122, 250, 505, 1016, 2039, 4083, 8175, 16354, 32712, 65534 } };

        public static int[][] valptr3 = new int[][] { new int[] { 0, 0, 0, 7, 8, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 2, 3, 6, 9, 11, 15, 17, 23, 30, 33, 37, 39, 45, 47 }, new int[] { 0, 0, 2, 4, 7, 8, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 2, 4, 5, 7, 10, 15, 20, 24, 29, 35, 39, 47, 50, 53 } };

        public static byte[][] huffval3 = new byte[][] { new byte[] { 4, 5, 3, 2, 6, 1, 0, 7, 8, 9, 10, 11 }, new byte[] { 1, 2, 3, 17, 4, 0, 5, 33, 18, 49, 65, 81, 6, 19, 97, 34, 113, 129, 20, 50, 145, 161, 7, 21, 177, 66, 35, 193, 82, 209, 225, 51, 22, 98, 240, 36, 114, 130, 241, 37, 67, 52, 83, 146, 162, 178, 99, 115, 194, 53, 68, 39, 147, 163, 179, 54, 23, 84, 100, 116, 195, 210, 226, 8, 38, 131, 9, 10, 24, 25, 132, 148, 69, 70, 164, 180, 86, 211, 85, 40, 26, 242, 227, 243, 196, 212, 228, 244, 101, 117, 133, 149, 165, 181, 197, 213, 229, 245, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246, 55, 71, 87, 103, 119, 135, 151, 167, 183, 199, 215, 231, 247, 56, 72, 88, 104, 120, 136, 152, 168, 184, 200, 216, 232, 248, 41, 57, 73, 89, 105, 121, 137, 153, 169, 185, 201, 217, 233, 249, 42, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234, 250 }, new byte[] { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }, new byte[] { 1, 0, 2, 17, 3, 4, 33, 18, 49, 65, 5, 81, 19, 97, 34, 6, 113, 129, 145, 50, 161, 177, 240, 20, 193, 209, 225, 35, 66, 21, 82, 98, 114, 241, 51, 36, 52, 67, 130, 22, 146, 83, 37, 162, 99, 178, 194, 7, 115, 210, 53, 226, 68, 131, 23, 84, 147, 8, 9, 10, 24, 25, 38, 54, 69, 26, 39, 100, 116, 85, 55, 242, 163, 179, 195, 40, 41, 211, 227, 243, 132, 148, 164, 180, 196, 212, 228, 244, 101, 117, 133, 149, 165, 181, 197, 213, 229, 245, 70, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246, 71, 87, 103, 119, 135, 151, 167, 183, 199, 215, 231, 247, 56, 72, 88, 104, 120, 136, 152, 168, 184, 200, 216, 232, 248, 57, 73, 89, 105, 121, 137, 153, 169, 185, 201, 217, 233, 249, 42, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234, 250 } };

        public static int[] maxcodelength3 = { 8, 16, 9, 16 };
        #endregion

        #region DHT 4
        public static int[][] mincode4 = new int[][] { new int[] { 0, 0, 0, 12, 28, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 4, 10, 24, 58, 120, 246, 500, 1012, 2036, 4082, 8174, 16350, 32706, 65424 }, new int[] { 0, 0, 0, 12, 30, 62, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 2, 10, 24, 54, 116, 246, 504, 1014, 2036, 4078, 8168, 16350, 32714, 65430 } };

        public static int[][] maxcode4 = new int[][] { new int[] { -1, -1, 5, 13, 30, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, new int[] { -1, 1, 4, 11, 28, 59, 122, 249, 505, 1017, 2040, 4086, 8174, 16352, 32711, 65534 }, new int[] { -1, -1, 5, 14, 30, 62, 126, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, new int[] { -1, 0, 4, 11, 26, 57, 122, 251, 506, 1017, 2038, 4083, 8174, 16356, 32714, 65534 } };

        public static int[][] valptr4 = new int[][] { new int[] { 0, 0, 0, 6, 8, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 2, 3, 5, 10, 12, 15, 19, 25, 31, 36, 41, 42, 45, 51 }, new int[] { 0, 0, 0, 6, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 1, 4, 6, 9, 13, 20, 26, 29, 33, 36, 42, 49, 56, 57 } };

        public static byte[][] huffval4 = new byte[][] { new byte[] { 7, 8, 6, 5, 4, 9, 3, 10, 2, 1, 0, 11 }, new byte[] { 1, 2, 3, 4, 17, 5, 6, 33, 18, 0, 7, 49, 65, 19, 8, 81, 34, 97, 20, 113, 129, 50, 145, 9, 161, 35, 240, 193, 66, 177, 21, 209, 22, 225, 241, 82, 51, 23, 36, 98, 24, 67, 52, 37, 130, 10, 25, 114, 83, 38, 99, 146, 68, 53, 162, 84, 178, 26, 115, 54, 194, 210, 39, 69, 55, 70, 226, 242, 131, 147, 163, 179, 100, 85, 40, 195, 211, 41, 56, 227, 243, 71, 72, 86, 101, 42, 57, 58, 73, 74, 87, 88, 89, 90, 102, 116, 117, 132, 133, 103, 118, 119, 104, 134, 135, 148, 149, 164, 165, 180, 181, 196, 197, 212, 213, 228, 229, 244, 245, 150, 151, 166, 167, 182, 183, 198, 199, 214, 215, 230, 231, 246, 247, 105, 106, 120, 121, 122, 136, 137, 138, 152, 153, 154, 168, 169, 170, 184, 185, 186, 200, 201, 202, 216, 217, 218, 232, 233, 234, 248, 249, 250 }, new byte[] { 6, 5, 4, 3, 7, 2, 8, 1, 9, 0, 10, 11 }, new byte[] { 1, 2, 3, 17, 0, 4, 33, 5, 18, 49, 6, 65, 240, 81, 97, 7, 19, 34, 113, 129, 145, 161, 177, 193, 8, 50, 209, 20, 225, 35, 241, 66, 21, 82, 9, 22, 51, 98, 210, 114, 36, 130, 194, 146, 147, 67, 23, 115, 131, 162, 178, 99, 37, 52, 83, 226, 179, 53, 38, 68, 84, 100, 69, 85, 39, 10, 132, 180, 24, 25, 26, 40, 41, 42, 54, 55, 56, 57, 58, 70, 71, 72, 73, 74, 86, 87, 88, 89, 90, 101, 102, 103, 104, 105, 106, 116, 117, 118, 119, 120, 121, 122, 133, 134, 135, 136, 137, 138, 148, 149, 150, 151, 152, 153, 154, 163, 164, 165, 166, 167, 168, 169, 170, 181, 182, 183, 184, 185, 186, 195, 196, 197, 198, 199, 200, 201, 202, 211, 212, 213, 214, 215, 216, 217, 218, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250 } };

        public static int[] maxcodelength4 = { 6, 16, 7, 16 };
        #endregion

        #region DHT 5
        public static int[][] mincode5 = new int[][] { new int[] { 0, 0, 2, 14, 30, 62, 126, 254, 510, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 2, 12, 26, 58, 120, 248, 500, 1010, 2034, 4080, 8176, 16362, 32730, 65484 }, new int[] { 0, 0, 2, 14, 30, 62, 126, 254, 510, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 4, 12, 26, 56, 120, 248, 502, 1012, 2034, 4080, 8174, 16362, 32736, 65482 } };

        public static int[][] maxcode5 = new int[][] { new int[] { -1, 0, 6, 14, 30, 62, 126, 254, 510, -1, -1, -1, -1, -1, -1, -1 }, new int[] { -1, 0, 5, 12, 28, 59, 123, 249, 504, 1016, 2039, 4087, 8180, 16364, 32741, 65534 }, new int[] { -1, 0, 6, 14, 30, 62, 126, 254, 510, -1, -1, -1, -1, -1, -1, -1 }, new int[] { -1, 1, 5, 12, 27, 59, 123, 250, 505, 1016, 2039, 4086, 8180, 16367, 32740, 65534 } };

        public static int[][] valptr5 = new int[][] { new int[] { 0, 0, 1, 6, 7, 8, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 1, 5, 6, 9, 11, 15, 17, 22, 29, 35, 43, 48, 51, 63 }, new int[] { 0, 0, 1, 6, 7, 8, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 2, 4, 5, 7, 11, 15, 18, 22, 27, 33, 40, 47, 53, 58 } };

        public static byte[][] huffval5 = new byte[][] { new byte[] { 3, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11 }, new byte[] { 1, 0, 2, 17, 3, 4, 33, 18, 49, 5, 65, 81, 97, 19, 34, 113, 129, 50, 6, 20, 145, 161, 177, 66, 35, 36, 21, 82, 193, 98, 51, 52, 114, 130, 209, 67, 7, 37, 146, 83, 240, 225, 241, 99, 115, 53, 22, 162, 178, 131, 38, 68, 147, 84, 100, 69, 194, 163, 116, 54, 23, 210, 85, 226, 101, 242, 179, 132, 195, 211, 117, 227, 243, 70, 39, 148, 164, 133, 180, 149, 196, 212, 228, 244, 165, 181, 197, 213, 229, 245, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246, 55, 71, 87, 103, 119, 135, 151, 167, 183, 199, 215, 231, 247 }, new byte[] { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }, new byte[] { 1, 0, 2, 17, 3, 33, 49, 18, 4, 65, 81, 97, 113, 34, 19, 5, 50, 129, 145, 20, 161, 177, 66, 35, 193, 82, 209, 240, 51, 36, 98, 225, 114, 130, 146, 67, 83, 21, 99, 115, 52, 241, 37, 6, 22, 162, 178, 131, 7, 38, 53, 194, 210, 68, 147, 84, 163, 23, 100, 69, 85, 54, 116, 101, 226, 242, 179, 132, 195, 211, 117, 227, 243, 70, 148, 164, 133, 180, 149, 196, 212, 228, 244, 165, 181, 197, 213, 229, 245, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246, 39, 55, 71, 87, 103, 119, 135, 151, 167, 183, 199 } };

        public static int[] maxcodelength5 = { 9, 16, 9, 16 };
        #endregion

        #region DHT 6
        public static int[][] mincode6 = new int[][] { new int[] { 0, 0, 2, 14, 30, 62, 126, 254, 510, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 4, 10, 26, 58, 120, 248, 502, 1014, 2038, 4084, 0, 0, 0, 65408 }, new int[] { 0, 0, 6, 14, 30, 62, 126, 254, 510, 1022, 2046, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 4, 10, 24, 56, 120, 246, 500, 1014, 2038, 4084, 0, 0, 0, 65408 } };

        public static int[][] maxcode6 = new int[][] { new int[] { -1, 0, 6, 14, 30, 62, 126, 254, 510, -1, -1, -1, -1, -1, -1, -1 }, new int[] { -1, 1, 4, 12, 28, 59, 123, 250, 506, 1018, 2041, 4087, -1, -1, -1, 65533 }, new int[] { -1, 2, 6, 14, 30, 62, 126, 254, 510, 1022, 2046, -1, -1, -1, -1, -1 }, new int[] { -1, 1, 4, 11, 27, 59, 122, 249, 506, 1018, 2041, 4087, -1, -1, -1, 65529 } };

        public static int[][] valptr6 = new int[][] { new int[] { 0, 0, 1, 6, 7, 8, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 2, 3, 6, 9, 11, 15, 18, 23, 28, 32, 0, 0, 0, 36 }, new int[] { 0, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 2, 3, 5, 9, 13, 16, 20, 27, 32, 36, 0, 0, 0, 40 } };

        public static byte[][] huffval6 = new byte[][] { new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }, new byte[] { 1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250 }, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }, new byte[] { 0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250 } };

        public static int[] maxcodelength6 = { 9, 16, 11, 16 };
        #endregion

        #region DHT 7
        public static int[][] mincode7 = new int[][] { new int[] { 0, 0, 6, 14, 30, 62, 126, 254, 510, 1022, 2046, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 4, 12, 26, 58, 120, 246, 500, 1014, 2040, 4086, 8178, 16368, 32740, 65482 }, new int[] { 0, 2, 6, 14, 30, 62, 126, 254, 510, 1022, 2046, 4094, 0, 0, 0, 0 }, new int[] { 0, 0, 4, 0, 24, 58, 118, 248, 508, 1018, 2042, 4086, 8178, 16366, 32738, 65488 } };

        public static int[][] maxcode7 = new int[][] { new int[] { -1, 2, 6, 14, 30, 62, 126, 254, 510, 1022, 2046, -1, -1, -1, -1, -1 }, new int[] { -1, 1, 5, 12, 28, 59, 122, 249, 506, 1019, 2042, 4088, 8183, 16369, 32740, 65534 }, new int[] { 0, 2, 6, 14, 30, 62, 126, 254, 510, 1022, 2046, 4094, -1, -1, -1, -1 }, new int[] { -1, 1, 5, -1, 28, 58, 123, 253, 508, 1020, 2042, 4088, 8182, 16368, 32743, 65534 } };

        public static int[][] valptr7 = new int[][] { new int[] { 0, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0, 0, 0, 0 }, new int[] { 0, 0, 2, 4, 5, 8, 10, 13, 17, 24, 30, 33, 36, 42, 44, 45 }, new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0, 0, 0 }, new int[] { 0, 0, 2, 0, 4, 9, 10, 16, 22, 23, 26, 27, 30, 35, 38, 44 } };

        public static byte[][] huffval7 = new byte[][] { new byte[] { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }, new byte[] { 1, 0, 2, 17, 3, 33, 18, 49, 4, 65, 81, 34, 19, 97, 113, 50, 129, 145, 177, 66, 161, 5, 209, 193, 20, 240, 82, 35, 114, 51, 98, 225, 130, 241, 67, 52, 146, 162, 178, 21, 210, 83, 36, 115, 194, 99, 6, 131, 147, 226, 242, 163, 68, 84, 100, 37, 53, 69, 22, 38, 116, 54, 85, 101, 179, 132, 195, 211, 117, 227, 243, 70, 148, 164, 133, 180, 149, 196, 212, 228, 244, 165, 181, 197, 213, 229, 245, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246 }, new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }, new byte[] { 0, 1, 17, 2, 33, 3, 49, 65, 18, 81, 97, 113, 129, 145, 34, 19, 50, 240, 161, 177, 4, 193, 209, 225, 241, 66, 82, 35, 98, 114, 20, 146, 51, 130, 67, 36, 162, 178, 52, 83, 68, 99, 115, 194, 210, 131, 147, 163, 84, 226, 242, 5, 21, 37, 6, 22, 38, 53, 100, 69, 85, 54, 116, 101, 179, 132, 195, 211, 117, 227, 243, 70, 148, 164, 133, 180, 149, 196, 212, 228, 244, 165, 181, 197, 213, 229, 245, 86, 102, 118, 134 } };

        public static int[] maxcodelength7 = { 11, 16, 12, 16 };
        #endregion

        static Huffman()
        {

            //Add 1st DHT
            DHT = new DHTStruct()
            {
                mincode = mincode1,
                maxcode = maxcode1,
                valptr = valptr1,
                huffval = huffval1,
                maxcodelength = maxcodelength1
            };
            Console.WriteLine("DHT 1 hashcode" + DHT.GetHashCode() );
            Console.WriteLine(string.Join(", ", DHT.huffval[0] )   );
            DHTs.Add(DHT);
            

            //Add 2nd DHT
            DHT = new DHTStruct()
            {
                mincode = mincode2,
                maxcode = maxcode2,
                valptr = valptr2,
                huffval = huffval2,
                maxcodelength = maxcodelength2
            };
            DHTs.Add(DHT);

            //Add 3rd DHT
            DHT = new DHTStruct()
            {
                mincode = mincode3,
                maxcode = maxcode3,
                valptr = valptr3,
                huffval = huffval3,
                maxcodelength = maxcodelength3
            };
            DHTs.Add(DHT);

            //Add 4th DHT
            DHT = new DHTStruct()
            {
                mincode = mincode4,
                maxcode = maxcode4,
                valptr = valptr4,
                huffval = huffval4,
                maxcodelength = maxcodelength4
            };
            DHTs.Add(DHT);

            //Add 5th DHT
            DHT = new DHTStruct()
            {
                mincode = mincode5,
                maxcode = maxcode5,
                valptr = valptr5,
                huffval = huffval5,
                maxcodelength = maxcodelength5
            };
            DHTs.Add(DHT);

            //Add 6th DHT
            DHT = new DHTStruct()
            {
                mincode = mincode6,
                maxcode = maxcode6,
                valptr = valptr6,
                huffval = huffval6,
                maxcodelength = maxcodelength6
            };
            DHTs.Add(DHT);

            //Add 7th DHT
            DHT = new DHTStruct()
            {
                mincode = mincode7,
                maxcode = maxcode7,
                valptr = valptr7,
                huffval = huffval7,
                maxcodelength = maxcodelength7
            };
            DHTs.Add(DHT);

            //Add DHTs from file, if any
            String path = "Huffman.json";
            // See if file exists, if exists meaning Huffman values are there
            if (File.Exists(path))
            {

                Console.WriteLine("Huffman table file exists");
                //Check if file is valid
                try
                {

                    using (StreamReader r = new StreamReader(path))
                    {
                        String json = r.ReadToEnd();
                        var jarray = JsonConvert.DeserializeObject<List<DHTStruct>>(json);

                        //Console.WriteLine("jarray:  " + jarray[0].huffval);
                        
                        foreach (DHTStruct dhtRecord in jarray)
                        {
                            bool containsItem = DHTs.Any(item => item.id == dhtRecord.id);
                            if (!containsItem)
                            {
                                DHTs.Add(dhtRecord);
                            }
                        }
                        //DHTs.Union(jarray);
                    }

                    Console.WriteLine("Huffman tables count" + DHTs.Count);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error - " + e.Message);
                }

            }

        }

        public static void switchHuffman(int dhtIndex)
        {
            dhtIndex = dhtIndex - 1;
            mincode = DHTs[dhtIndex].mincode;
            maxcode = DHTs[dhtIndex].maxcode;
            valptr = DHTs[dhtIndex].valptr;
            huffval = DHTs[dhtIndex].huffval;
            maxcodelength = DHTs[dhtIndex].maxcodelength;
            
        }
    }


}
